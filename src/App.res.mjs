// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Webapi__Fetch from "rescript-webapi/src/Webapi/Webapi__Fetch.res.mjs";

function decodeBlock(json) {
  var dict = Js_json.decodeObject(json);
  if (dict !== undefined) {
    return {
            canonical: Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(dict, "canonical"), Js_json.decodeBoolean), false),
            blockHeight: Belt_Option.getWithDefault(Belt_Option.map(Belt_Option.flatMap(Js_dict.get(dict, "blockHeight"), Js_json.decodeNumber), (function (prim) {
                        return prim | 0;
                      })), 0),
            stateHash: Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(dict, "stateHash"), Js_json.decodeString), ""),
            coinbaseReceiverUsername: Belt_Option.flatMap(Js_dict.get(dict, "coinbaseReceiverUsername"), Js_json.decodeString),
            snarkFees: Belt_Option.getWithDefault(Belt_Option.flatMap(Js_dict.get(dict, "snarkFees"), Js_json.decodeString), "0")
          };
  } else {
    return {
            canonical: false,
            blockHeight: 0,
            stateHash: "",
            coinbaseReceiverUsername: undefined,
            snarkFees: "0"
          };
  }
}

function decodeBlocks(json) {
  var blocks = Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(Js_json.decodeObject(json), (function (dict) {
                      return Js_dict.get(dict, "data");
                    })), Js_json.decodeObject), (function (dict) {
              return Js_dict.get(dict, "blocks");
            })), Js_json.decodeArray);
  if (blocks !== undefined) {
    return Belt_Array.map(blocks, decodeBlock);
  } else {
    return [];
  }
}

async function fetchData() {
  var payload = {};
  payload["query"] = "{\n    blocks(limit: 10) {\n      canonical\n      blockHeight\n      stateHash\n      coinbaseReceiverUsername\n      snarkFees\n    }\n  }";
  try {
    var response = await fetch("https://api.minasearch.com/graphql", Webapi__Fetch.RequestInit.make("Post", {
              "Content-Type": "application/json",
              Accept: "application/json, multipart/mixed"
            }, Caml_option.some(JSON.stringify(payload)), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined));
    var json = await response.json();
    return decodeBlocks(json);
  }
  catch (exn){
    console.error("Failed to fetch Mina blocks");
    return [];
  }
}

function renderBlocks(blocks) {
  return Belt_Array.joinWith(Belt_Array.map(blocks, (function (block) {
                    var username = block.coinbaseReceiverUsername;
                    return "<li class=\"mb-4 p-4 bg-gray-100 rounded-lg\">\n       <h2 class=\"text-xl font-semibold text-blue-600\">Block " + String(block.blockHeight) + "</h2>\n       <p class=\"text-gray-600\"><strong>State Hash:</strong> " + block.stateHash + "</p>\n       <p class=\"text-gray-600\"><strong>Canonical:</strong> " + (
                            block.canonical ? "Yes" : "No"
                          ) + "</p>\n       <p class=\"text-gray-600\"><strong>Coinbase Receiver:</strong> " + (
                            username !== undefined ? username : "None"
                          ) + "</p>\n       <p class=\"text-gray-600\"><strong>Snark Fees:</strong> " + block.snarkFees + "</p>\n     </li>";
                  })), "", (function (x) {
                return x;
              }));
}

async function main() {
  var container = document.getElementById("app");
  if (container == null) {
    console.error("Error: Element with id 'app' not found");
    return ;
  }
  container.innerHTML = "<div class=\"container mx-auto p-4\">\n         <h1 class=\"text-3xl font-bold text-blue-600 mb-4\">Mina Blockchain Blocks</h1>\n         <p class=\"text-gray-600\">Loading...</p>\n       </div>";
  var blocks = await fetchData();
  container.innerHTML = "<div class=\"container mx-auto p-4\">\n         <h1 class=\"text-3xl font-bold text-blue-600 mb-4\">Mina Blockchain Blocks</h1>\n         " + (
    blocks.length === 0 ? "<p class=\"text-red-600\">Failed to load blocks</p>" : "<ul>" + renderBlocks(blocks) + "</ul>"
  ) + "\n       </div>";
}

function handleDOMContentLoaded(_event) {
  main();
}

document.addEventListener("DOMContentLoaded", handleDOMContentLoaded);

export {
  decodeBlock ,
  decodeBlocks ,
  fetchData ,
  renderBlocks ,
  main ,
  handleDOMContentLoaded ,
}
/*  Not a pure module */
